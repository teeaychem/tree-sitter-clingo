=============
One condition
=============

a :- b : c.

---

(source_file
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier))))
        (condition
          (literal (atom (function (identifier)))))))))


================
Three conditions
================

a :- b : c, d, e.

---

(source_file
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier))))
        (condition
          (literal (atom (function (identifier))))
          (literal (atom (function (identifier))))
          (literal (atom (function (identifier)))))))))


===============
Empty condition
===============

a :- b : .

---

(source_file
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier))))
        (condition)))))


=============
With conjunct
=============

a :- b : c; d.

---

(source_file
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier))))
        (condition
          (literal (atom (function (identifier))))))
      (literal (atom (function (identifier)))))))


============
Complex body
============

a :- b : c; d; e : f, g; h : ; i.

---

(source_file
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier))))
        (condition
          (literal (atom (function (identifier))))))
        (literal (atom (function (identifier))))
        (conditional_literal
          (literal (atom (function (identifier))))
          (condition
            (literal (atom (function (identifier))))
            (literal (atom (function (identifier))))))
        (conditional_literal
            (literal (atom (function (identifier))))
            (condition))
          (literal (atom (function (identifier)))))))

=======
Cond.lp
=======

person(jane).  person(john).
day(mon).  day(tue).  day(wed).  day(thu).  day(fri).
available(jane) :- not on(fri).
available(john) :- not on(mon), not on(wed).
meet :- available(X) : person(X).
on(X) : day(X) :- meet.

---

(source_file
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))))))))
  (rule
    (head
      (literal (atom (function (identifier) (terms (term (function (identifier))))))))
    (body
      (literal (default_negation) (atom (function (identifier) (terms (term (function (identifier)))))))))
  (rule
    (head
      (literal (atom (function (identifier) (terms (term (function (identifier))))))))
    (body
      (literal (default_negation) (atom (function (identifier) (terms (term (function (identifier)))))))
      (literal (default_negation) (atom (function (identifier) (terms (term (function (identifier)))))))))
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (conditional_literal
        (literal (atom (function (identifier) (terms (term (variable))))))
        (condition (literal (atom (function (identifier) (terms (term (variable))))))))))
  (rule
    (head
      (disjunction
        (conditional_literal
          (literal (atom (function (identifier) (terms (term (variable))))))
          (condition (literal (atom (function (identifier) (terms (term (variable))))))))))
    (body
      (literal (atom (function (identifier)))))))
