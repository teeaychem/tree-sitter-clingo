=======================
Heuristic (priority.lp)
=======================

#heuristic b. [ 1,sign]
#heuristic a. [10,true]
{a;b}.
:- a, b.
{c}.
#heuristic c.         [ 1@10,sign]
#heuristic c : not b. [-1@20,sign]

---

(source_file
  (statement
    (directive (heuristic))
    (atom (function (identifier)))
    (bias (term (number)))
    (modifier (term (function (identifier)))))
  (statement
    (directive (heuristic))
    (atom (function (identifier)))
    (bias (term (number)))
    (modifier (term (function (identifier)))))
  (fact
    (aggregate
      (literal (atom (function (identifier))))
      (literal (atom (function (identifier))))))
  (integrity_constraint
    (literal (atom (function (identifier))))
    (literal (atom (function (identifier)))))
  (fact (aggregate (literal (atom (function (identifier))))))
  (statement
    (directive (heuristic))
    (atom (function (identifier)))
    (bias (term (number)))
    (priority (term (number)))
    (modifier (term (function (identifier)))))
  (statement
    (directive (heuristic))
    (atom (function (identifier)))
    (body (literal (default_negation) (atom (function (identifier)))))
    (bias (term (minus (term (number)))))
    (priority (term (number)))
    (modifier (term (function (identifier))))))


=====
Program (basic.lp)
====

#program preference.
:- not better(P), optimize(P).

---

(source_file
  (statement (directive (program)) (identifier))
  (integrity_constraint
    (literal (default_negation) (atom (function (identifier) (terms (term (variable))))))
    (literal (atom (function (identifier) (terms (term (variable))))))))


================
Const (const.lp)
================

#const x = 42.
#const y = f(x,z).
p(x,y).

---

(source_file
  (statement (directive (const))
    (identifier)
    (term (number)))
  (statement (directive (const))
    (identifier)
    (term (function (identifier) (terms (term (function (identifier))) (term (function (identifier)))))))
  (fact (literal (atom (function (identifier) (terms (term (function (identifier))) (term (function (identifier)))))))))


=================
External (ext.lp)
=================

p(1). p(2). p(3).
#external q(X) : p(X).
q(1).
r(X) :- q(X).

---

(source_file
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (statement (directive (external))
    (atom (function (identifier) (terms (term (variable)))))
    (body (literal (atom (function (identifier) (terms (term (variable))))))))
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (rule
    (head (literal (atom (function (identifier) (terms (term (variable)))))))
    (body (literal (atom (function (identifier) (terms (term (variable)))))))))


====================
Include (include.lp)
====================

#include "bird.lp".

---

(source_file (statement (directive (include)) (string)))


===============
Show (showa.lp)
===============

p(1). p(2). p(3).
{ q(X) : p(X) }.
a :- q(1).
#show a/0.
#show q/1.

---

(source_file
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (fact (literal (atom (function (identifier) (terms (term (number)))))))
  (fact
    (aggregate
      (literal (atom (function (identifier) (terms (term (variable))))))
      (condition (literal (atom (function (identifier) (terms (term (variable)))))))))
  (rule
    (head
      (literal (atom (function (identifier)))))
    (body
      (literal (atom (function (identifier) (terms (term (number))))))))
  (statement (directive (show)) (identifier) (arity (number)))
  (statement (directive (show)) (identifier) (arity (number))))


==========
Show empty
==========

#show .

---

(source_file
  (statement (directive (show))))


=========
Show term
=========

#show a : b, c.

---

(source_file
  (statement (directive (show))
    (term (function (identifier)))
    (body (literal (atom (function (identifier)))) (literal (atom (function (identifier)))))))


==================
Python (gcd-py.lp)
==================

python.

#script (python)

import clingo
N = clingo.Number

def gcd(a, b):
    if a.number == 0:
      return b
    else:
        na = a.number
        nb = b.number
        nc = nb % na
        return gcd(N(nc), a)

#end.

python.

---

(source_file
  (fact (literal (atom (function (identifier)))))
  (python (directive (script)) (script_contents))
  (fact (literal (atom (function (identifier))))))


================
Lua (gcd-lua.lp)
================

lua.

#script (lua)

clingo = require("clingo")
N = clingo.Number

function gcd(a, b)
  if a.number == 0 then
    return b
  else
    na = a.number
    nb = b.number
    nc = nb % na
    return gcd(N(nc), a)
  end
end

#end.

lua.

---

(source_file
  (fact (literal (atom (function (identifier)))))
  (lua (directive (script)) (script_contents))
  (fact (literal (atom (function (identifier))))))
